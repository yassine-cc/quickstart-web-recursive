name: Main Workflow

permissions:
  actions: write
  contents: write
  statuses: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      dispatchId:
        type: string
      depth:
        type: number
        default: 1
      max-depth:
        type: number
        default: 3
      previous-file:
        type: string
        description: Previous test yaml file to use as a base

jobs:
  match-dispatchId:
    if: ${{ inputs.dispatchId }}
    runs-on: [ubuntu-latest]
    steps:
      - id: dispatch-id
        name: dispatchId:${{ inputs.dispatchId }}
        run: echo "💁 The dispatch ID is ${{ github.event.inputs.dispatchId }}"

  generate-exploratory:
    needs: match-dispatchId
    uses: ./.github/workflows/generate-exploratory.yml
    with:
      depth: ${{ fromJson(inputs.depth) }}
      max-depth: ${{ fromJson(inputs.max-depth) }}
      website-url: ${{ vars.TESTDRIVER_WEBSITE }}
      base-branch: ${{ github.ref_name }}
      previous-file: ${{ inputs.previous-file }}
    secrets:
      key: ${{ secrets.TESTDRIVER_API_KEY }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-regression:
    needs: generate-exploratory
    uses: ./.github/workflows/generate-regressions.yml
    with:
      depth: ${{ fromJson(inputs.depth) }}
      max-depth: ${{ fromJson(inputs.max-depth) }}
      website-url: ${{ vars.TESTDRIVER_WEBSITE }}
      base-branch: ${{ needs.generate-exploratory.outputs.pr-branch }}
    secrets:
      key: ${{ secrets.TESTDRIVER_API_KEY }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  save-results:
    needs: generate-regression
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        env:
          RESULTS: ${{ needs.generate-regression.outputs.results }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const results = JSON.parse(process.env.RESULTS);
            console.log(results);
            fs.writeFileSync('results.json', JSON.stringify(results, null, 2));
      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: results.json
          path: results.json


  generate-next-depth:
    if: ${{inputs.depth != inputs.max-depth}}
    name: Trigger Next Level
    needs: generate-regression
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Next Depth of Workflows
        if: ${{ inputs.depth != inputs.max-depth }}
        uses: actions/github-script@v6
        env:
          RESULTS: ${{ needs.generate-regression.outputs.results }}
        with:
          github-token: ${{ secrets.GH_PAT_TOKEN }}
          script: |
            const results = [];
            
            for (const item of JSON.parse(process.env.RESULTS)) {
              // Check if branch exists
              const branchExists = await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: item.branch
              })
                .then(()=>true)
                .catch(()=>false)
              
              if(!branchExists) {
                console.log(`Branch ${item.branch} does not exist, skipping workflow dispatch`);
                continue              
              }

              const dispatchId = Math.random().toString(36).substring(2, 15);

              // Branch exists, dispatch workflow
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: "generate.yml",
                ref: item.branch,
                inputs: {
                  "dispatchId": dispatchId,
                  "depth": "" + (${{ inputs.depth }} + 1),
                  "max-depth": "" + ${{ inputs.max-depth }},
                  "previous-file": item.filename
                }
              });
              console.log(`Dispatched workflow for branch: ${item.branch}`);
              results.push({
                ...item,
                dispatchId: dispatchId
              });
            }
            fs.writeFileSync('results.json', JSON.stringify(results, null, 2));
            
      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: results.json
          path: results.json
